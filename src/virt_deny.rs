use anyhow::Result;
use walrus::{Module, ValType};

use crate::walrus_ops::add_stub_exported_func;

// set exports to deny clock access
pub(crate) fn deny_clocks_virt(module: &mut Module) -> Result<()> {
    add_stub_exported_func(
        module,
        "wasi:clocks/monotonic-clock#now",
        vec![],
        vec![ValType::I64],
    )?;
    add_stub_exported_func(
        module,
        "wasi:clocks/monotonic-clock#resolution",
        vec![],
        vec![ValType::I64],
    )?;
    add_stub_exported_func(
        module,
        "wasi:clocks/monotonic-clock#subscribe",
        vec![ValType::I64, ValType::I32],
        vec![ValType::I32],
    )?;

    add_stub_exported_func(
        module,
        "wasi:clocks/wall-clock#now",
        vec![],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:clocks/wall-clock#resolution",
        vec![],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:clocks/wall-clock#subscribe",
        vec![ValType::I64, ValType::I32],
        vec![ValType::I32],
    )?;

    add_stub_exported_func(
        module,
        "wasi:clocks/timezone#display",
        vec![ValType::I32, ValType::I64, ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "cabi_post_wasi:clocks/timezone#display",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:clocks/timezone#utc-offset",
        vec![ValType::I32, ValType::I64, ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:clocks/timezone#drop-timezone",
        vec![ValType::I32],
        vec![],
    )?;

    Ok(())
}

pub(crate) fn deny_http_virt(module: &mut Module) -> Result<()> {
    add_stub_exported_func(
        module,
        "wasi:http/incoming-handler#handle",
        vec![ValType::I32, ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/outgoing-handler#handle",
        vec![
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
        ],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-fields",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#new-fields",
        vec![ValType::I32, ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#fields-get",
        vec![ValType::I32, ValType::I32, ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#fields-set",
        vec![
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
        ],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#fields-delete",
        vec![ValType::I32, ValType::I32, ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#fields-append",
        vec![
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
        ],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#fields-entries",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#fields-clone",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#finish-incoming-stream",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#finish-outgoing-stream",
        vec![ValType::I32, ValType::I32, ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-incoming-request",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-outgoing-request",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-request-method",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-request-path-with-query",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-request-scheme",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-request-authority",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-request-headers",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-request-consume",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#new-outgoing-request",
        vec![
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
        ],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#outgoing-request-write",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-response-outparam",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#set-response-outparam",
        vec![
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
            ValType::I32,
        ],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-incoming-response",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-outgoing-response",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-response-status",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-response-headers",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#incoming-response-consume",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#new-outgoing-response",
        vec![ValType::I32, ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#outgoing-response-write",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#drop-future-incoming-response",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#future-incoming-response-get",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "wasi:http/types#listen-to-future-incoming-response",
        vec![ValType::I32],
        vec![ValType::I32],
    )?;
    Ok(())
}

pub(crate) fn deny_random_virt(module: &mut Module) -> Result<()> {
    add_stub_exported_func(
        module,
        "wasi:random/random#get-random-bytes",
        vec![ValType::I64],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "cabi_post_wasi:random/random#get-random-bytes",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:random/random#get-random-u64",
        vec![],
        vec![ValType::I64],
    )?;
    add_stub_exported_func(
        module,
        "wasi:random/insecure#get-insecure-random-bytes",
        vec![ValType::I64],
        vec![ValType::I32],
    )?;
    add_stub_exported_func(
        module,
        "cabi_post_wasi:random/insecure#get-insecure-random-bytes",
        vec![ValType::I32],
        vec![],
    )?;
    add_stub_exported_func(
        module,
        "wasi:random/insecure#get-insecure-random-u64",
        vec![],
        vec![ValType::I64],
    )?;
    add_stub_exported_func(
        module,
        "wasi:random/insecure-seed#insecure-seed",
        vec![],
        vec![ValType::I32],
    )?;
    Ok(())
}

pub(crate) fn deny_exit_virt(module: &mut Module) -> Result<()> {
    add_stub_exported_func(module, "wasi:cli/exit#exit", vec![ValType::I32], vec![])?;
    Ok(())
}

pub(crate) fn deny_sockets_virt(module: &mut Module) -> Result<()> {
    // TODO: Complete stubbing implementation
    Ok(())
}
