use anyhow::{bail, Context, Result};
use walrus::Module;

use super::StubRequirement;

/// Imports exposed by WASI for sockets functionality which are allowed to be missing
const WASI_SOCKETS_IMPORTS: [(&str, &str, &StubRequirement); 54] = [
    (
        "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16",
        "resolve-addresses",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16",
        "[method]resolve-address-stream.resolve-next-address",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16",
        "[resource-drop]resolve-address-stream",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16",
        "[method]resolve-address-stream.subscribe",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.start-bind",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.finish-bind",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.start-connect",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.finish-connect",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.start-listen",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.finish-listen",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.accept",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.local-address",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.remote-address",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.is-listening",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.address-family",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-listen-backlog-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.keep-alive-enabled",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-keep-alive-enabled",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.keep-alive-idle-time",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-keep-alive-idle-time",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.keep-alive-interval",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-keep-alive-interval",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.keep-alive-count",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-keep-alive-count",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.hop-limit",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-hop-limit",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.receive-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-receive-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.send-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.set-send-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.subscribe",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[method]tcp-socket.shutdown",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/tcp@0.2.0-rc-2024-01-16",
        "[resource-drop]tcp-socket",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.start-bind",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.finish-bind",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.local-address",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.remote-address",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.address-family",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.unicast-hop-limit",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.set-unicast-hop-limit",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.receive-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.set-receive-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.send-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.set-send-buffer-size",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.subscribe",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]udp-socket.stream",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[resource-drop]udp-socket",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]incoming-datagram-stream.receive",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]incoming-datagram-stream.subscribe",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[resource-drop]incoming-datagram-stream",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]outgoing-datagram-stream.check-send",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]outgoing-datagram-stream.send",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[method]outgoing-datagram-stream.subscribe",
        &StubRequirement::Required,
    ),
    (
        "wasi:sockets/udp@0.2.0-rc-2024-01-16",
        "[resource-drop]outgoing-datagram-stream",
        &StubRequirement::Required,
    ),
];

/// Replace imported WASI functions that implement socket access with no-ops
pub(crate) fn stub_sockets_virt(module: &mut Module) -> Result<()> {
    for (module_name, func_name, stub_requirement) in WASI_SOCKETS_IMPORTS {
        match stub_requirement {
            StubRequirement::Required => {
                let fid = module
                    .imports
                    .get_func(module_name, func_name)
                    .with_context(|| {
                        format!(
                    "failed to find required sockets import [{func_name}] in module [{module_name}]"
                )
                    })?;
                module
                    .replace_imported_func(fid, |(body, _)| {
                        body.unreachable();
                    })
                    .with_context(|| {
                        "failed to stub sockets functionality [{}] in module [{export_name}]"
                    })?;
            }
            _ => bail!("unexpected stub requirement in imports for WASI sockets"),
        }
    }

    Ok(())
}

/// Exported functions related to sockets
const WASI_SOCKETS_EXPORTS: [&str; 54] = [
    "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16#resolve-addresses",
    "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16#[method]resolve-address-stream.resolve-next-address",
    "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16#[dtor]resolve-address-stream",
    "wasi:sockets/ip-name-lookup@0.2.0-rc-2024-01-16#[method]resolve-address-stream.subscribe",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.start-bind",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.finish-bind",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.start-connect",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.finish-connect",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.start-listen",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.finish-listen",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.accept",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.local-address",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.remote-address",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.is-listening",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.address-family",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-listen-backlog-size",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.keep-alive-enabled",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-keep-alive-enabled",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.keep-alive-idle-time",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-keep-alive-idle-time",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.keep-alive-interval",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-keep-alive-interval",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.keep-alive-count",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-keep-alive-count",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.hop-limit",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-hop-limit",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.receive-buffer-size",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-receive-buffer-size",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.send-buffer-size",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.set-send-buffer-size",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.subscribe",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[method]tcp-socket.shutdown",
    "wasi:sockets/tcp@0.2.0-rc-2024-01-16#[dtor]tcp-socket",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.start-bind",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.finish-bind",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.local-address",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.remote-address",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.address-family",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.unicast-hop-limit",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.set-unicast-hop-limit",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.receive-buffer-size",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.set-receive-buffer-size",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.send-buffer-size",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.set-send-buffer-size",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.subscribe",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]udp-socket.stream",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[dtor]udp-socket",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]incoming-datagram-stream.receive",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]incoming-datagram-stream.subscribe",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[dtor]incoming-datagram-stream",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]outgoing-datagram-stream.check-send",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]outgoing-datagram-stream.send",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[method]outgoing-datagram-stream.subscribe",
    "wasi:sockets/udp@0.2.0-rc-2024-01-16#[dtor]outgoing-datagram-stream",
];

/// Strip exported WASI functions that implement sockets access
pub(crate) fn strip_sockets_virt(module: &mut Module) -> Result<()> {
    stub_sockets_virt(module)?;
    for export_name in WASI_SOCKETS_EXPORTS {
        module.exports.remove(export_name).with_context(|| {
            format!("failed to strip WASI sockets export function [{export_name}]")
        })?;
    }
    Ok(())
}
